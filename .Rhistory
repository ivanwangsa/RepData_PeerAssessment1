folder('a','b')
?folder
file.path('a','b')
path_to_data <- file.path('data', 'activity.csv')
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
str(measured_data)
?read.csv
?transform
?string
?as.Date
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- transform(measured_data, date <- as.Date(as.character(date)),
time <- strptime(as.character(interval), "%H%m")
analytic_data
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- transform(measured_data, date <- as.Date(as.character(date)), time <- strptime(as.character(interval), "%H%m"))
analytic_data
head(analytic_data)
2 / 3
2 // 3
div(2, 3)
?div
?mod
2 % 3
mod(2, 3)
2 %% 3
7 %/% 5
as.POSIXct(10)
as.POSIXct(10, origin = '1970-01-01')
as.POSIXct(11, origin = '1970-01-01')
as.POSIXct(0, origin = '1970-01-01')
as.POSIXct(0, origin = '1970-01-01', tz = 'GMT')
as.POSIXct(10, origin = '1970-01-01', tz = 'GMT')
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- transform(measured_data, date <- as.Date(as.character(date)))
analytic_data <- transform(analytic_data, time <- as.POSIXct(interval %/% 100 * 60 + interval %% 100, origin = '1970-01-01', tz = 'GMT'))
head(analytic_data)
?copy
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- measured_data
analytic_data$date <- as.Date(as.character(analytic_data$date))
analytic_data$time <- as.POSIXct(analytic_data$interval %/% 100 * 60 + analytic_data$interval %% 100, origin = '1970-01-01', tz = 'GMT')
analytic_data
head(analytic_data)
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- measured_data
analytic_data$date <- as.Date(as.character(analytic_data$date))
analytic_data$time <- as.POSIXct(analytic_data$interval %/% 100 * 60 * 60 + analytic_data$interval %% 100 * 60, origin = '1970-01-01', tz = 'GMT')
head(analytic_data)
install.packages('reshape2')
install.packages('plyr')
library(plyr)
?ddply
# Summarize a dataset by two variables
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
# Note the use of the '.' function to allow
# group and sex to be used without quoting
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
?ave
require(graphics)
attach(warpbreaks)
ave(breaks, wool)
breaks
wool
library(dplyr)
install.packages('dplyr')
library(swirl); swirl()
read.csv(path2csv, stringsAsFactors = FALSE) -> mydf
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <- tbl_df(mydf)
rm('mydf')
?tbl_df
cran
?sselect
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
arch
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == '3.1.1', country == 'US')
?Comparison
filter(cran, country == 'IN', r_version <= '3.0.2')
filter(cran, country == 'US' | country == 'IN')
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id) -> cran2
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size) -> cran3
cran3
mutate(cran3, size_mb = size / 2^ 20)
mutate(cran, size_gb = size_mb / 2 ^ 10)
mutate(cran, size_mb = size / 2 ^ 20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, size_mb = size / 2 ^ 20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, correct_size <- size - 1000)
mutate(cran3, correct_size <- size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(ddplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by
group_by(cran, package) -> by_package
by_package
summarize(by_package, mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679) -> top_counts
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465) -> top_unique
View(top_unique)
arrange(top_unique, desc(unique)) -> top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = count)
gather(students2, key = sex_class, value = count, -grade)
gather(students2, key = sex_class, value = count, -grade) -> res
res
?separate
separate(data = res, col = sex_class, into = c('sex', 'class'))
submit()
students3
?gather
submit()
?spread
submit()
extract_numeric('class5')
submit()
students4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?contains
?select
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today() -> this_day
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now() -> this_moment
class(this_day)
class(this_moment)
this_moment
minute(this_moment)
ymd('1989-05-17')
ymd('1989-05-17') -> my_date
my_date
class(my_date)
ymd('1989 May 17')
mdy('March 12, 1975')
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms('03:22:14')
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 24, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 0, minutes = 31)
this_moment
now('America/New_York') -> nyc
nyc
nyc + days(2)
nyc + days(2) -> depart
depart
update(depart, hours = 17, minutes = 34)->depart
depart
depart + hours(15) + minutes(50) -> arrive
?with_tz
with_tz(arrive, 'Asia/Hong_Kong') -> arrive
arrive
last_time <- mdy('June 17, 2008', tz = 'Singapore')
last_time
?new_interval
new_interval(last_time, arrive) -> how_long
as.period(how_long)
stopwatch()
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
url2 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
temp <- tempfile()
temp2 <- tempfile()
download.files(url, temp)
download.file(url, temp)
download.file(url, temp2)
download.file(url2, temp2)
df <- read.csv(temp, skip = 4, nrows = 190)
df2 <- read.csv(temp2)
head(df)
install.packages('Hmisc')
library(Hmisc)
df <- df %>% select(X, X.1, X.3, X.4)
library(plydr)
library(plyr)
library(dplyr)
df <- df %>% select(X, X.1, X.3, X.4)
df
head(df)
names(df) <- c('CountryCode')
names(df) <- c('CountryCode', 'GDPRank', 'CountryName', 'GDP')
res <- merge(df, df2, by='CountryCode', all = FALSE)
nrow(res)
res <- arrange(res, desc(GDPRank))
head(res)
cut2(GDPRank, g = 5)
cut2(res$GDPRank, g = 5)
res$GDPQ <- cut2(res$GDPRank, g = 5)
res
head(res)
res$GDPQ <- cut2(res$GDP, g = 5)
summary(res$GDP)
str(res$GDP)
extract_numeric('1,924')
library(tidyr)
extract_numeric('1,924')
res$GDP <- extract_numeric(res$GDP)
res$GDPQ <- cut2(res$GDP, g = 5)
?table
table(res$GDPQ, res$Income.Group)
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(temp, url)
download.file(url, temp)
df <- read.csv(temp)
agricultureLogical <- df$ACR == 3 & df$AGS == 6
which(agricultureLogical)
library(dplyr)
library(lubridate)
path_to_data <- file.path('data', 'activity.csv')
measured_data <- read.csv(path_to_data)
analytic_data <- measured_data
head(analytic_data)
library(dplyr)
library(lubridate)
path_to_data <- file.path('data', 'activity.csv')
measured_data <- tbl_df(read.csv(path_to_data))
analytic_data <- measured_data
analytic_data
?ddmmyy
library(lubridate)
ymd('2012-10-01')
?hm
hm(5)
hm(2310)
hm('2310')
hms('231000')
hms('23:10:00')
?hms
?period
as.period(20)
as.period(100)
as.period(5000)
as.period(5000, unit = 'years')
?period
library(dplyr)
library(lubridate)
path_to_data <- file.path('data', 'activity.csv')
measured_data <- tbl_df(read.csv(path_to_data))
analytic_data <- measured_data %>%
mutate(date = ymd(as.character(date))) %>%
mutate(interval = new_period(hour = interval %/% 100, minute = interval %% 100))
analytic_data
tail(analytic_data)
total_steps_data <- analytic_data %>%
group_by(date) %>%
summarise(sum(steps, na.rm = TRUE))
total_steps_data
hist(total_steps_data)
?hist
total_steps_data <- analytic_data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
g <- ggplot(total_steps_data, aes(date, total_steps))
total_steps_per_day <- analytic_data %>%
group_by(date) %>%
summarise(total_steps = sum(steps, na.rm = TRUE))
head(total_steps_per_day)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram()
print(g)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram(col = 'blue') + xlab('Total Steps') + ylab('Frequency')
print(g)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram(col = 'blue', fill = 'blue') + xlab('Total Steps') + ylab('Frequency')
print(g)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram(col = 'black', fill = 'blue') + xlab('Total Steps') + ylab('Frequency')
print(g)
tail(total_steps_per_day)
?range
range(1,2,3)
diff(range(1,2,3))
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps))
+ geom_histogram(col = 'black', fill = 'blue', binwidth = diff(range(total_steps_per_day$total_steps)) / 30)
+ labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/30')
print(g)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram(col = 'black', fill = 'blue') + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
print(g)
library(ggplot2)
g <- ggplot(total_steps_per_day, aes(total_steps)) + geom_histogram(col = 'black', fill = 'blue') + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
print(g)
rainbow(3)
pie(rep(1,3), col = rainbow(3))
pie(rep(1,32), col = rainbow(32))
pie(rep(1,45), col = rainbow(45))
library(ggplot2)
colPalette <- rainbow(45)
g <- ggplot(total_steps_per_day, aes(total_steps))
g <- g + geom_histogram(col = 'black', fill = colPalette[30]) # colors with blue
g <- g + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
g <- g + geom_rug(col = colPalette[27])
print(g)
library(ggplot2)
colPalette <- rainbow(45)
g <- ggplot(total_steps_per_day, aes(total_steps))
g <- g + geom_histogram(col = 'black', fill = colPalette[30]) # colors with blue
g <- g + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
g <- g + geom_rug(col = colPalette[27])
g <- g + theme_bw(base_family = 'Times')
print(g)
install.packages("extrafont")
?theme_bw
library(ggplot2)
colPalette <- rainbow(45)
g <- ggplot(total_steps_per_day, aes(total_steps))
g <- g + geom_histogram(col = 'black', fill = colPalette[30]) # colors with blue
g <- g + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
g <- g + geom_rug(col = colPalette[27])
g <- g + theme_bw(base_size = 12, base_family = 'Times')
print(g)
library(ggplot2)
colPalette <- rainbow(45)
g <- ggplot(total_steps_per_day, aes(total_steps))
g <- g + geom_histogram(col = 'black', fill = colPalette[30]) # colors with blue
g <- g + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
g <- g + geom_rug(col = colPalette[27])
g <- g + theme_bw(base_size = 14, base_family = 'Times')
print(g)
library(ggplot2)
colPalette <- rainbow(45)
g <- ggplot(total_steps_per_day, aes(total_steps))
g <- g + geom_histogram(col = 'black', fill = colPalette[30]) # colors with blue
g <- g + labs(x = 'Total Steps', y = 'Frequency', title = 'Histogram of FitBit data from 2012/10/01 - 2012/11/31')
g <- g + geom_rug(col = colPalette[27])
g <- g + theme_bw(base_size = 14, base_family = 'sans')
print(g)
?coord_cartesian
daily_total_steps_summary <- summary(daily_total_steps)
source('~/.active-rstudio-document', echo=TRUE)
daily_total_steps_summary
class(daily_total_steps_summary)
daily_total_steps_summary[1,2]
daily_total_steps_summary[1,3]
daily_total_steps_summary[2,2]
daily_total_steps_summary[3,2]
daily_total_steps_summary <- summary(daily_total_steps$total_steps)
daily_total_steps_summary
source('~/.active-rstudio-document', echo=TRUE)
